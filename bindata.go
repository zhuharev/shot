// Code generated by go-bindata.
// sources:
// r.js
// DO NOT EDIT!

package shot

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _rJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xc1\x8e\x9b\x30\x10\xbd\xfb\x2b\xa6\x1c\x36\xa0\x20\x20\xdb\x56\x95\x40\xb9\xf6\xd4\x43\xb5\xdb\x5b\xb5\x07\x97\x0c\x60\x89\xd8\xd4\x1e\x92\xb6\x11\xff\xde\xb1\x81\x4d\xb6\xad\x7a\xda\x03\x88\x99\xf7\x66\xe6\xf9\x79\x38\x49\x0b\xee\xa7\x23\x3c\xc2\x1e\x2c\x7e\x1f\x95\xc5\x78\x33\x67\x36\x49\x25\x3c\x2e\x6d\xeb\x18\x9d\x93\x99\x8f\x2a\x21\x02\x32\xda\x9e\x81\xa8\x23\x1a\xca\x3c\x8f\xb6\x1e\xfb\xba\x7b\x4a\x45\xa3\x7a\xd4\xf2\x88\x8c\x86\xdc\xfd\xd3\x36\xca\x06\xdd\x46\xa9\x20\x75\x44\x33\xd2\x8a\xbc\x65\xb6\x93\x27\xfc\x2c\xa9\x5b\x73\xef\x38\x37\xc8\x16\x6f\x25\x9d\xf1\x9b\x4f\x6d\x92\xac\xb6\x28\x09\x63\x16\x27\xf2\xdc\x21\x7d\x99\x1b\xc6\xcd\xa8\x6b\x52\x46\xc7\xc9\x65\xe8\xa4\x26\x73\xcc\xf0\x87\x22\x26\x4e\x29\x2c\x53\x13\x11\x1a\x67\x27\x85\xe7\xc1\x58\x7a\x54\xbf\xfc\x94\x0b\x9c\xd5\x81\xba\x12\x76\xf7\x45\x91\x42\x87\xaa\xed\xa8\x84\x0f\x45\x01\x53\x35\x57\xd4\xbd\x1a\x1e\xb0\xa6\xc0\x26\x33\x94\xc0\xc4\x1e\x1b\x0a\x1f\xff\x2b\xf7\x46\x35\x5c\xd6\xc8\xde\x61\xb5\x08\x30\xfa\x93\x91\x87\x8f\x4a\x2b\xd7\xe1\xc1\xa3\xab\x7a\x47\x92\x46\x97\xc0\x45\x00\xd4\x46\x3b\xd3\x63\xd6\x9b\x36\xde\x3c\x06\xa0\x84\x0d\x6c\x61\x21\x55\xcc\x81\x7f\x5b\xe0\x11\x76\x4f\x1f\xd0\xc6\x7e\xe2\xcc\x85\x3f\x9c\xe1\x1c\x9b\xb3\x7b\x5f\x14\x45\x22\xa6\xab\xb8\x07\x74\x66\xb4\x35\xf2\x89\x51\x9d\x5e\x0a\xb4\xe8\x06\xd6\x85\x5e\xa2\x6a\xe0\x39\xce\xc2\x36\xec\xf7\x61\x2b\xee\xee\xe0\x4d\x33\x1f\xe2\xd5\xf4\x41\xb0\x91\xec\x88\x62\x0a\x62\xd7\x76\x2f\xfa\x84\x99\xde\x73\xd6\xe5\x97\x8a\x23\xaf\xf2\xba\x63\xbc\xb0\xd1\xcc\x82\x95\xe3\x8f\xb7\x6c\xac\x9f\x08\xc8\x37\xf5\x17\xe3\xb9\xc3\x16\xa2\x3c\xe2\xf7\x6d\x09\x3f\xc1\xba\x45\xc9\x52\xc5\x9e\xf2\x9f\x72\x7b\x8b\x11\xdf\x9c\x25\x68\x91\xc0\xb7\x60\xab\x92\xc5\xf3\x01\x75\xcc\x61\x7a\x35\x7a\x15\x29\xa6\xa4\xfa\x1d\x00\x00\xff\xff\x22\x08\xe2\x4d\xa8\x03\x00\x00")

func rJsBytes() ([]byte, error) {
	return bindataRead(
		_rJs,
		"r.js",
	)
}

func rJs() (*asset, error) {
	bytes, err := rJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "r.js", size: 936, mode: os.FileMode(436), modTime: time.Unix(1447940151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"r.js": rJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"r.js": &bintree{rJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
